{"version":3,"sources":["app/tasks/actions/index.js","app/tasks/constants/ActionTypes.js","app/tasks/components/TaskItem.js","app/tasks/components/TaskList.js","app/tasks/components/TaskForm.js","app/tasks/components/TaskSort.js","app/tasks/components/TaskSearch.js","app/tasks/components/TaskControl.js","app/App.js","app/tasks/reducers/tasks.js","app/tasks/reducers/isDisplayForm.js","app/tasks/reducers/taskEditing.js","app/tasks/reducers/keyword.js","app/tasks/reducers/index.js","index.js"],"names":["updateEditingTask","task","type","TaskItem","onToggleTaskStatus","_this","props","id","onUpdateItem","onOpenForm","onDeleteItem","onCloseForm","_this$props","this","index","react_default","a","createElement","name","className","concat","status","onClick","React","Component","connect","state","dispatch","actions","onToggleForm","TaskList","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onChangeFilterValue","event","target","value","Number","toLowerCase","setState","defineProperty","filterName","filterStatus","tasks","keyword","_this$state","filteredTasks","assign","filter","indexOf","elementTasks","map","components_TaskItem","key","border","onChange","TaskForm","onInputChange","onSubmitTaskForm","preventDefault","onClearForm","taskEditing","nextProps","isDisplayForm","onSubmit","htmlFor","required","TaskSort","TaskSearch","onChangeKeyword","onSubmitSearch","submitSearch","placeholder","TaskControl","components_TaskSearch","components_TaskSort","App","filterData","onCrease3Unit","console","log","sort","by","components_TaskControl","components_TaskList","components_TaskForm","initialState","JSON","parse","localStorage","getItem","getRandomString","Math","floor","random","toString","substring","findIndexById","list","result","forEach","item","reducer","arguments","length","undefined","action","toConsumableArray","newTask","objectSpread","push","setItem","stringify","splice","rootReducer","combineReducers","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","src_app_App","document","getElementById"],"mappings":"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","file":"static/js/main.ff10ef40.chunk.js","sourcesContent":["import * as ActionTypes from '../constants/ActionTypes';\n\nexport const listAll = () => ({\n    type: ActionTypes.LIST_ALL\n})\n\nexport const addTask = (task) => ({\n    type: ActionTypes.ADD_TASK,\n    task\n})\n\nexport const deleteTask = (id) => ({\n    type: ActionTypes.DELETE_TASK,\n    id\n})\n\nexport const updateTask = (task) => ({\n    type: ActionTypes.UPDATE_TASK,\n    task\n})\n\nexport const onToggleForm = () => ({\n    type: ActionTypes.TOGGLE_ADD_FORM\n})\n\nexport const onCloseForm = () => ({\n    type: ActionTypes.CLOSE_ADD_FORM\n})\n\nexport const onOpenForm = () => ({\n    type: ActionTypes.OPEN_ADD_FORM\n})\n\nexport const onToggleTaskStatus = (id) => ({\n    type: ActionTypes.TOGGLE_TASK_STATUS,\n    id\n})\n\nexport const updateEditingTask = (task) => ({\n    type: ActionTypes.UPDATE_EDITING_TASK,\n    task\n})\n\nexport const submitSearch = (keyword) => ({\n    type: ActionTypes.SUBMIT_SEARCH,\n    keyword\n})","export const LIST_ALL = 'LIST_ALL';\nexport const ADD_TASK = 'ADD_TASK';\nexport const UPDATE_TASK = 'UPDATE_TASK';\nexport const DELETE_TASK = 'DELETE_TASK';\nexport const TOGGLE_TASK_STATUS = 'TOGGLE_TASK_STATUS';\n\nexport const OPEN_ADD_FORM = 'OPEN_ADD_FORM';\nexport const CLOSE_ADD_FORM = 'CLOSE_ADD_FORM';\nexport const TOGGLE_ADD_FORM = 'TOGGLE_ADD_FORM';\n\nexport const UPDATE_EDITING_TASK = 'UPDATE_EDITING_TASK';\n\nexport const SUBMIT_SEARCH = 'SUBMIT_SEARCH';\n\nexport const UPDATE_FILTER = 'UPDATE_FILTER';","import React from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from '../actions';\n\nclass TaskItem extends React.Component {\n    onToggleTaskStatus = () => {\n        this.props.onToggleTaskStatus(this.props.task.id);\n    }\n\n    onUpdateItem = () => {\n        this.props.updateEditingTask(this.props.task);\n        this.props.onOpenForm();\n    }\n\n    onDeleteItem = () => {\n        this.props.onCloseForm();\n        this.props.updateEditingTask(null);\n        this.props.onDeleteItem(this.props.task.id);\n    }\n\n    render() {\n        const { task, index } = this.props;\n\n        return (\n            <tr>\n                <td>{index + 1}</td>\n                <td>{task.name}</td>\n                <td className=\"text-center\">\n\n                    <span\n                        className={`label ${task.status ? 'label-success' : 'label-default'}`}\n                        onClick={this.onToggleTaskStatus}>\n                        {task.status ? 'Active' : 'Inactive'}\n                    </span>\n                </td>\n                <td>\n                    <button\n                        className=\"btn btn-warning\"\n                        onClick={this.onUpdateItem}\n                        type=\"button\">\n                        Edit\n                    </button>\n                    &nbsp;&nbsp;\n\n                    <button\n                        className=\"btn btn-danger\"\n                        type=\"button\"\n                        onClick={this.onDeleteItem}>\n                        Delete\n                    </button>\n                </td>\n            </tr>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onToggleTaskStatus: (id) => {\n            dispatch(actions.onToggleTaskStatus(id));\n        },\n        onDeleteItem: (id) => {\n            dispatch(actions.deleteTask(id));\n        },\n        onCloseForm: () => {\n            dispatch(actions.onCloseForm());\n        },\n        onOpenForm: () => {\n            dispatch(actions.onOpenForm());\n        },\n        onToggleForm: () => {\n            dispatch(actions.onToggleForm());\n        },\n        updateEditingTask: (task) => {\n            dispatch(actions.updateEditingTask(task));\n        }\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(TaskItem)","import React from 'react';\nimport TaskItem from './TaskItem';\nimport { connect } from 'react-redux';\n\nclass TaskList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            filterName: '',\n            filterStatus: -1\n            // all: -1  ||  active: 1  ||  inactive: 0\n        };\n    }\n\n    onChangeFilterValue = (event) => {\n        const name = event.target.name;\n        var value = event.target.value;\n\n        if (name === 'filterStatus') {\n            value = Number(value)\n        } else {\n            value = value.toLowerCase();\n        }\n\n        this.setState({\n            [name]: value\n        });\n    }\n\n    render() {\n        const { tasks, keyword } = this.props;\n\n        const { filterName, filterStatus } = this.state;\n        let filteredTasks = Object.assign([], tasks);\n\n        /* START FILTER TASKS */\n        // filter by name base on name filter input\n        if (filterName) {\n            filteredTasks = filteredTasks.filter((task) => {\n                return task.name.toLowerCase().indexOf(filterName) !== -1;\n            });\n        }\n\n        // filter by status\n        filteredTasks = filteredTasks.filter((task) => {\n            return filterStatus === -1\n                ? true\n                : task.status === (filterStatus === 1)\n        });\n\n        // filter by name base on search keyword\n        const elementTasks = filteredTasks.map((task, index) => {\n            if ((keyword && task.name.toLowerCase().indexOf(keyword) !== -1) || !keyword) {\n                return <TaskItem\n                    key={index}\n                    index={index}\n                    task={task} />\n            }\n            return null\n        });\n        /* END FILTER TASKS */\n\n        return (\n            <div className=\"panel panel-warning\">\n                <table border=\"1\" className=\"table table-bordered table-hover\">\n                    <thead>\n                        <tr>\n                            <th className=\"text-center\">ID</th>\n                            <th className=\"text-center\">Name</th>\n                            <th className=\"text-center\">Status</th>\n                            <th className=\"text-center\">Action</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td></td>\n                            <td>\n                                <input\n                                    className=\"form-control\"\n                                    type=\"text\"\n                                    name=\"filterName\"\n                                    value={filterName}\n                                    onChange={this.onChangeFilterValue} />\n                            </td>\n                            <td>\n                                <select\n                                    className=\"form-control\"\n                                    name=\"filterStatus\"\n                                    value={filterStatus}\n                                    onChange={this.onChangeFilterValue}>\n                                    <option value={-1}>All</option>\n                                    <option value={0}>Inactive</option>\n                                    <option value={1}>Active</option>\n                                </select>\n                            </td>\n                            <td></td>\n                        </tr>\n\n                        {elementTasks}\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        tasks: state.tasks,\n        keyword: state.keyword\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(TaskList)","import React from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from '../actions';\n\n/**\n * INPUT: props.taskEditing\n * OUTPUT: state\n */\n\nclass TaskForm extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            id: '',\n            name: '',\n            status: false\n        }\n    }\n\n    componentWillMount() {\n        if (this.props.taskEditing && this.props.taskEditing.id !== '') {\n            this.setState({\n                id: this.props.taskEditing.id,\n                name: this.props.taskEditing.name,\n                status: this.props.taskEditing.status\n            });\n        } else {\n            this.onClearForm();\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps) {\n            if (nextProps.taskEditing) {\n                this.setState({\n                    id: nextProps.taskEditing.id,\n                    name: nextProps.taskEditing.name,\n                    status: nextProps.taskEditing.status\n                });\n            } else {\n                this.onClearForm();\n            }\n        }\n    }\n\n    onInputChange = (event) => {\n        var name = event.target.name;\n        var value = event.target.value;\n        if (name === 'status') {\n            value = value === 'true' ? true : false;\n        }\n        this.setState({\n            [name]: value\n        })\n    }\n\n    onCloseForm = () => {\n        this.props.onCloseForm();\n    }\n\n    onSubmitTaskForm = (event) => {\n        event.preventDefault();\n        this.props.onSubmitTaskForm(this.state);\n        this.onClearForm();\n        this.onCloseForm();\n    }\n\n    onClearForm = () => {\n        this.setState({\n            name: '',\n            status: false\n        });\n    }\n\n    render() {\n        const { name, status, id } = this.state;\n\n        if (!this.props.isDisplayForm)\n            return '';\n\n        return (\n            <div className=\"panel panel-warning\">\n                <div className=\"panel-heading\">\n                    <h3 className=\"panel-title\">\n                        {id !== '' ? 'Update work' : 'Add work'}\n                        <span onClick={this.props.onCloseForm} className=\"fa fa-times-circle text-right\" />\n                    </h3>\n                </div>\n                <div className=\"panel-body\">\n                    <form onSubmit={this.onSubmitTaskForm}>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"name\">Name: </label>\n                            <input\n                                required\n                                className=\"form-control\"\n                                type=\"text\"\n                                name=\"name\"\n                                value={name}\n                                onChange={this.onInputChange}\n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"status\">Status: </label>\n                            <select\n                                name=\"status\"\n                                className=\"form-control\"\n                                value={status}\n                                onChange={this.onInputChange}\n                            >\n                                <option value={true}>Active</option>\n                                <option value={false}>Inactive</option>\n                            </select>\n                        </div>\n                        <div>\n                            <button className=\"btn btn-warning\" type=\"submit\">Save</button>\n                            &nbsp;&nbsp;\n                            <button\n                                className=\"btn btn-danger\"\n                                type=\"button\"\n                                onClick={this.onClearForm}>\n                                Clear\n                            </button>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        )\n\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        isDisplayForm: state.isDisplayForm,\n        taskEditing: state.taskEditing\n    }\n}\n\nconst mapDispatchToProps = (dispatch, props) => {\n    return {\n        onSubmitTaskForm: (task) => {\n            if (task.id === '') {\n                dispatch(actions.addTask(task));\n            } else {\n                dispatch(actions.updateTask(task));\n            }\n            dispatch(actions.updateEditingTask(null));\n        },\n        updateEditingTask: (task) => {\n            dispatch(actions.updateEditingTask(task));\n        },\n        onCloseForm: () => {\n            dispatch(actions.onCloseForm());\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskForm)","import React from 'react';\n\nclass TaskSort extends React.Component {\n    render() {\n        return (\n            <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\n                Sort function is pending ...\n            </div>\n        );\n    }\n}\n\nexport default TaskSort","import React from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from '../actions/index';\n\nclass TaskSearch extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            keyword: ''\n        }\n    }\n\n    onChangeKeyword = (event) => {\n        this.setState({\n            keyword: event.target.value\n        });\n    }\n\n    onSubmitSearch = (event) => {\n        event.preventDefault();\n        const keyword = this.state.keyword.toLowerCase();\n        this.props.submitSearch(keyword);\n    }\n\n    render() {\n        const { keyword } = this.state;\n\n        return (\n            <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\n                <div className=\"form-group\">\n                    <form\n                        className=\"input-group\"\n                        onSubmit={this.onSubmitSearch}>\n                        <input\n                            className=\"form-control\"\n                            name=\"keyword\"\n                            type=\"text\"\n                            value={keyword}\n                            onChange={this.onChangeKeyword}\n                            placeholder=\"Input keyword ...\" />\n                        <span className=\"input-group-btn\">\n                            <button className=\"btn btn-primary\" type=\"submit\">Search</button>\n                        </span>\n                    </form>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        submitSearch: (keyword) => {\n            dispatch(actions.submitSearch(keyword))\n        }\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(TaskSearch)","import React from 'react';\nimport TaskSort from './TaskSort';\nimport TaskSearch from './TaskSearch';\n\nclass TaskControl extends React.Component {\n\n    onSubmitSearch = (keyword) => {\n        this.props.onSubmitSearch(keyword);\n    }\n\n    render() {\n        return (\n            <div className=\"panel panel-warning\">\n                <div className=\"panel-body\">\n                    {/* Search */}\n                    <TaskSearch />\n\n                    {/* Sort */}\n                    <TaskSort />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default TaskControl","import './App.css';\nimport { connect } from 'react-redux';\nimport React, { Component } from 'react';\nimport * as actions from './tasks/actions/index';\nimport TaskList from './tasks/components/TaskList';\nimport TaskForm from './tasks/components/TaskForm';\nimport TaskControl from './tasks/components/TaskControl';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            sort: {\n                by: 'name',\n                value: 1\n            },\n            value: 0\n        };\n    }\n\n    onToggleForm = () => {\n        if (!this.props.isDisplayForm || this.props.taskEditing === null) {\n            this.props.onToggleForm();\n        }\n        this.props.updateEditingTask(null);\n    }\n\n    onChangeFilterValue = (filterData) => {\n        this.setState({\n            filter: {\n                name: filterData.filterName,\n                status: filterData.filterStatus\n            }\n        })\n    }\n\n    onSubmitSearch = (keyword) => {\n        this.setState({\n            keyword: keyword\n        });\n    }\n\n    onCrease3Unit = () => {\n        this.setState(\n            (state) => {\n                console.log('inner 1');\n                return {\n                    value: state.value + 1\n                }\n            },\n            () => {\n                console.log('callback 1');\n            }\n        );\n\n        this.setState(\n            (state) => {\n                console.log('inner 2');\n                return {\n                    value: state.value + 1\n                }\n            },\n            () => {\n                console.log('callback 2');\n            }\n        );\n\n        this.setState(\n            (state) => {\n                console.log('inner 3');\n                return {\n                    value: state.value + 1\n                }\n            },\n            () => {\n                console.log('callback 3');\n            }\n        );\n    }\n\n    render() {\n        const {\n            isDisplayForm\n        } = this.props;\n\n        return (\n            <div className=\"container\">\n                <div className=\"text-center\">\n                    <h1>WORK MANAGEMENT</h1>\n                </div>\n\n                {/* add box */}\n                <div className=\"row\">\n                    <div className={isDisplayForm === true ? \"col-xs-8 col-sm-8 col-md-8 col-lg-8\" : \"col-xs-12 col-sm-12 col-md-12 col-lg-12\"}>\n                        <div className=\"row\">\n                            <div className=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n                                <div className=\"panel panel-default\">\n                                    <div className=\"panel-body\">\n                                        <button className=\"btn btn-primary\"\n                                            onClick={this.onToggleForm}>\n                                            Add work\n                                        </button>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n\n                        {/* Search & sort */}\n                        <div className=\"row\">\n                            <div className=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n                                <TaskControl />\n                            </div>\n                        </div>\n\n                        {/* list box */}\n                        <div className=\"row mt-15\">\n                            <div className=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n                                <TaskList />\n                            </div>\n                        </div>\n\n                        <div className=\"row mt-15\">\n                            <div className=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n                                <div className=\"panel panel-warning\">\n                                    <div className=\"panel-body\">\n                                        <h4>Test area for functional setState</h4>\n                                        <p>Value: {this.state.value}</p>\n                                        <button\n                                            className=\"btn btn-primary\"\n                                            onClick={this.onCrease3Unit}>\n                                            Increase 3 unit</button>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"col-xs-4 col-sm-4 col-md-4 col-lg-4\">\n                        {isDisplayForm === true\n                            ? <TaskForm />\n                            : null}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        isDisplayForm: state.isDisplayForm,\n        taskEditing: state.taskEditing\n    };\n}\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onToggleForm: () => {\n            dispatch(actions.onToggleForm());\n        },\n        updateEditingTask: (task) => {\n            dispatch(actions.updateEditingTask(task));\n        },\n        onOpenForm: () => {\n            dispatch(actions.onOpenForm());\n        },\n        onCloseForm: () => {\n            dispatch(actions.onCloseForm());\n        }\n    };\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(App);\n","import * as ActionTypes from '../constants/ActionTypes';\n\nvar initialState = JSON.parse(localStorage.getItem('tasks'));\n\nconst generateRandomId = () => {\n    return getRandomString() + getRandomString() + '-' + getRandomString() + getRandomString();\n}\nconst getRandomString = () => {\n    return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1)\n}\nconst findIndexById = (id, list) => {\n    let result = -1;\n    list.forEach((item, index) => {\n        if (item.id === id) {\n            result = index;\n        }\n    });\n    return result;\n}\n\nconst reducer = (state = initialState === null ? [] : initialState, action) => {\n    var index = -1;\n    switch (action.type) {\n        case ActionTypes.LIST_ALL:\n            return [...state];\n\n        case ActionTypes.ADD_TASK:\n            let newTask = {\n                ...action.task,\n                id: generateRandomId()\n            };\n\n            state.push(newTask);\n            localStorage.setItem('tasks', JSON.stringify(state));\n            return [...state];\n\n        case ActionTypes.UPDATE_TASK:\n            index = findIndexById(action.task.id, state);\n            state[index] = action.task;\n            localStorage.setItem('tasks', JSON.stringify(state));\n            return [...state];\n\n        case ActionTypes.TOGGLE_TASK_STATUS:\n            index = findIndexById(action.id, state);\n\n            state[index] = {\n                ...state[index],\n                status: !state[index].status\n            };\n\n            localStorage.setItem('tasks', JSON.stringify(state));\n            return [...state];\n\n        case ActionTypes.DELETE_TASK:\n            index = findIndexById(action.id, state);\n            state.splice(index, 1);\n            localStorage.setItem('tasks', JSON.stringify(state));\n            return [...state];\n\n        default:\n            return [...state];\n    }\n}\n\nexport default reducer","import * as ActionTypes from '../constants/ActionTypes';\n\nvar initialState = false;\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case ActionTypes.TOGGLE_ADD_FORM:\n            let newState = !state;\n            return newState;\n\n        case ActionTypes.OPEN_ADD_FORM:\n            return true;\n\n        case ActionTypes.CLOSE_ADD_FORM:\n            return false;\n\n        default:\n            return state;\n    }\n}\n\nexport default reducer","import * as ActionTypes from '../constants/ActionTypes';\n\nvar initialState = null;\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case ActionTypes.UPDATE_EDITING_TASK:\n            return action.task;\n\n        default:\n            return state;\n    }\n}\n\nexport default reducer","import * as actionType from '../constants/ActionTypes';\n\nconst initialState = ''\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionType.SUBMIT_SEARCH:\n            return action.keyword;\n        default:\n            return state\n    }\n}\n\nexport default reducer","import { combineReducers } from 'redux';\nimport tasks from './tasks';\nimport isDisplayForm from './isDisplayForm';\nimport taskEditing from './taskEditing';\nimport keyword from './keyword';\n\nconst rootReducer = combineReducers({\n    tasks,\n    isDisplayForm,\n    taskEditing,\n    keyword,\n});\n\nexport default rootReducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\n// import * as serviceWorker from './serviceWorker';\nimport rootReducer from './app/tasks/reducers/index';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\n\nconst store = createStore(\n    rootReducer,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n    ,\n    document.getElementById('root')\n);\n\n// serviceWorker.unregister();\n"],"sourceRoot":""}