{"version":3,"sources":["actions/index.js","constants/ActionTypes.js","components/TaskForm.js","components/TaskSort.js","components/TaskSearch.js","components/TaskControl.js","components/TaskItem.js","components/TaskList.js","App.js","reducers/tasks.js","reducers/isDisplayForm.js","reducers/taskEditing.js","reducers/index.js","index.js"],"names":["updateEditingTask","task","type","TaskForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onInputChange","event","name","target","value","setState","defineProperty","onCloseForm","onSubmitTaskForm","preventDefault","state","onClearForm","status","id","taskEditing","nextProps","_this$state","isDisplayForm","react_default","a","createElement","className","onClick","onSubmit","htmlFor","required","onChange","React","Component","connect","dispatch","actions","TaskSort","TaskSearch","onChangeKeyword","keyword","onSubmitSearch","toLowerCase","placeholder","TaskControl","components_TaskSearch","components_TaskSort","TaskItem","onToggleTaskStatus","onUpdateItem","onOpenForm","onDeleteItem","_this$props","index","concat","onToggleForm","TaskList","onChangeFilterValue","Number","filterName","filterStatus","elementTasks","tasks","map","components_TaskItem","key","border","App","filterData","filter","sort","by","components_TaskControl","components_TaskList","components_TaskForm","initialState","JSON","parse","localStorage","getItem","getRandomString","Math","floor","random","toString","substring","findIndexById","list","result","forEach","item","reducer","arguments","length","undefined","action","toConsumableArray","newTask","objectSpread","push","setItem","stringify","splice","rootReducer","combineReducers","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.4d4a5e9c.chunk.js","sourcesContent":["import * as ActionTypes from '../constants/ActionTypes';\n\nexport const listAll = () => ({\n    type: ActionTypes.LIST_ALL\n})\n\nexport const addTask = (task) => ({\n    type: ActionTypes.ADD_TASK,\n    task\n})\n\nexport const deleteTask = (id) => ({\n    type: ActionTypes.DELETE_TASK,\n    id\n})\n\nexport const updateTask = (task) => ({\n    type: ActionTypes.UPDATE_TASK,\n    task\n})\n\nexport const onToggleForm = () => ({\n    type: ActionTypes.TOGGLE_ADD_FORM\n})\n\nexport const onCloseForm = () => ({\n    type: ActionTypes.CLOSE_ADD_FORM\n})\n\nexport const onOpenForm = () => ({\n    type: ActionTypes.OPEN_ADD_FORM\n})\n\nexport const onToggleTaskStatus = (id) => ({\n    type: ActionTypes.TOGGLE_TASK_STATUS,\n    id\n})\n\nexport const updateEditingTask = (task) => ({\n    type: ActionTypes.UPDATE_EDITING_TASK,\n    task\n})","export const LIST_ALL = 'LIST_ALL';\nexport const ADD_TASK = 'ADD_TASK';\nexport const UPDATE_TASK = 'UPDATE_TASK';\nexport const DELETE_TASK = 'DELETE_TASK';\nexport const TOGGLE_TASK_STATUS = 'TOGGLE_TASK_STATUS';\n\nexport const OPEN_ADD_FORM = 'OPEN_ADD_FORM';\nexport const CLOSE_ADD_FORM = 'CLOSE_ADD_FORM';\nexport const TOGGLE_ADD_FORM = 'TOGGLE_ADD_FORM';\n\nexport const UPDATE_EDITING_TASK = 'UPDATE_EDITING_TASK';\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from '../actions';\n\n/**\n * INPUT: props.taskEditing\n * OUTPUT: state\n */\n\nclass TaskForm extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            id: '',\n            name: '',\n            status: false\n        }\n    }\n\n    componentWillMount() {\n        if (this.props.taskEditing && this.props.taskEditing.id !== '') {\n            this.setState({\n                id: this.props.taskEditing.id,\n                name: this.props.taskEditing.name,\n                status: this.props.taskEditing.status\n            });\n        } else {\n            this.onClearForm();\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps) {\n            if (nextProps.taskEditing) {\n                this.setState({\n                    id: nextProps.taskEditing.id,\n                    name: nextProps.taskEditing.name,\n                    status: nextProps.taskEditing.status\n                });\n            } else {\n                this.onClearForm();\n            }\n        }\n    }\n\n    onInputChange = (event) => {\n        var name = event.target.name;\n        var value = event.target.value;\n        if (name === 'status') {\n            value = value === 'true' ? true : false;\n        }\n        this.setState({\n            [name]: value\n        })\n    }\n\n    onCloseForm = () => {\n        this.props.onCloseForm();\n    }\n\n    onSubmitTaskForm = (event) => {\n        event.preventDefault();\n        this.props.onSubmitTaskForm(this.state);\n        this.onClearForm();\n        this.onCloseForm();\n    }\n\n    onClearForm = () => {\n        this.setState({\n            name: '',\n            status: false\n        });\n    }\n\n    render() {\n        const { name, status, id } = this.state;\n\n        if (!this.props.isDisplayForm)\n            return '';\n\n        return (\n            <div className=\"panel panel-warning\">\n                <div className=\"panel-heading\">\n                    <h3 className=\"panel-title\">\n                        {id !== '' ? 'Update work' : 'Add work'}\n                        <span onClick={this.props.onCloseForm} className=\"fa fa-times-circle text-right\" />\n                    </h3>\n                </div>\n                <div className=\"panel-body\">\n                    <form onSubmit={this.onSubmitTaskForm}>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"name\">Name: </label>\n                            <input\n                                required\n                                className=\"form-control\"\n                                type=\"text\"\n                                name=\"name\"\n                                value={name}\n                                onChange={this.onInputChange}\n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"status\">Status: </label>\n                            <select\n                                name=\"status\"\n                                className=\"form-control\"\n                                value={status}\n                                onChange={this.onInputChange}\n                            >\n                                <option value={true}>Active</option>\n                                <option value={false}>Inactive</option>\n                            </select>\n                        </div>\n                        <div>\n                            <button className=\"btn btn-warning\" type=\"submit\">Save</button>\n                            &nbsp;&nbsp;\n                            <button\n                                className=\"btn btn-danger\"\n                                type=\"button\"\n                                onClick={this.onClearForm}>\n                                Clear\n                            </button>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        )\n\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        isDisplayForm: state.isDisplayForm,\n        taskEditing: state.taskEditing\n    }\n}\n\nconst mapDispatchToProps = (dispatch, props) => {\n    return {\n        onSubmitTaskForm: (task) => {\n            if (task.id === '') {\n                dispatch(actions.addTask(task));\n            } else {\n                dispatch(actions.updateTask(task));\n            }\n            dispatch(actions.updateEditingTask(null));\n        },\n        updateEditingTask: (task) => {\n            dispatch(actions.updateEditingTask(task));\n        },\n        onCloseForm: () => {\n            dispatch(actions.onCloseForm());\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskForm)","import React from 'react';\n\nclass TaskSort extends React.Component {\n    render() {\n        return (\n            <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\n                Sort function is pending ...\n            </div>\n        );\n    }\n}\n\nexport default TaskSort","import React from 'react';\n\nclass TaskSearch extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            keyword: ''\n        }\n    }\n\n    onChangeKeyword = (event) => {\n        this.setState({\n            keyword: event.target.value\n        });\n    }\n\n    onSubmitSearch = (event) => {\n        event.preventDefault();\n        const keyword = this.state.keyword.toLowerCase();\n        this.props.onSubmitSearch(keyword);\n    }\n\n    render() {\n        const { keyword } = this.state;\n\n        return (\n            <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\n                <div className=\"form-group\">\n                    <form\n                        className=\"input-group\"\n                        onSubmit={this.onSubmitSearch}>\n                        <input\n                            className=\"form-control\"\n                            name=\"keyword\"\n                            type=\"text\"\n                            value={keyword}\n                            onChange={this.onChangeKeyword}\n                            placeholder=\"Input keyword ...\"\n                        />\n                        <span className=\"input-group-btn\">\n                            <button className=\"btn btn-primary\" type=\"submit\">Search</button>\n                        </span>\n                    </form>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default TaskSearch","import React from 'react';\nimport TaskSort from './TaskSort';\nimport TaskSearch from './TaskSearch';\n\nclass TaskControl extends React.Component {\n\n    onSubmitSearch = (keyword) => {\n        this.props.onSubmitSearch(keyword)\n    }\n\n    render() {\n        return (\n            <div className=\"panel panel-warning\">\n                <div className=\"panel-body\">\n                    {/* Search */}\n                    <TaskSearch\n                        onSubmitSearch={this.onSubmitSearch} />\n\n                    {/* Sort */}\n                    <TaskSort />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default TaskControl","import React from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from '../actions';\n\nclass TaskItem extends React.Component {\n    onToggleTaskStatus = () => {\n        this.props.onToggleTaskStatus(this.props.task.id);\n    }\n\n    onUpdateItem = () => {\n        this.props.updateEditingTask(this.props.task);\n        this.props.onOpenForm();\n    }\n\n    onDeleteItem = () => {\n        this.props.onCloseForm();\n        this.props.updateEditingTask(null);\n        this.props.onDeleteItem(this.props.task.id);\n    }\n\n    render() {\n        const { task, index } = this.props;\n\n        return (\n            <tr>\n                <td>{index + 1}</td>\n                <td>{task.name}</td>\n                <td className=\"text-center\">\n\n                    <span\n                        className={`label ${task.status ? 'label-success' : 'label-default'}`}\n                        onClick={this.onToggleTaskStatus}>\n                        {task.status ? 'Active' : 'Inactive'}\n                    </span>\n                </td>\n                <td>\n                    <button\n                        className=\"btn btn-warning\"\n                        onClick={this.onUpdateItem}\n                        type=\"button\">\n                        Edit\n                    </button>\n                    &nbsp;&nbsp;\n\n                    <button\n                        className=\"btn btn-danger\"\n                        type=\"button\"\n                        onClick={this.onDeleteItem}>\n                        Delete\n                    </button>\n                </td>\n            </tr>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onToggleTaskStatus: (id) => {\n            dispatch(actions.onToggleTaskStatus(id));\n        },\n        onDeleteItem: (id) => {\n            dispatch(actions.deleteTask(id));\n        },\n        onCloseForm: () => {\n            dispatch(actions.onCloseForm());\n        },\n        onOpenForm: () => {\n            dispatch(actions.onOpenForm());\n        },\n        onToggleForm: () => {\n            dispatch(actions.onToggleForm());\n        },\n        updateEditingTask: (task) => {\n            dispatch(actions.updateEditingTask(task));\n        }\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(TaskItem)","import React from 'react';\nimport TaskItem from './TaskItem';\nimport { connect } from 'react-redux';\n\nclass TaskList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            filterName: '',\n            filterStatus: -1 // all: -1  ||  active: 1  ||  inactive: 0\n        };\n    }\n\n    onChangeFilterValue = (event) => {\n        const name = event.target.name;\n        var value = event.target.value;\n\n        if (name === 'filterStatus') {\n            value = Number(value)\n        } else {\n            value = value.toLowerCase();\n        }\n\n        this.setState({\n            [name]: value\n        });\n\n        this.props.onChangeFilterValue({\n            filterName: name === 'filterName' ? value : this.state.filterName,\n            filterStatus: name === 'filterStatus' ? value : this.state.filterStatus\n        })\n    }\n\n    render() {\n        const { tasks } = this.props;\n        const elementTasks = tasks.map((task, index) => {\n            return <TaskItem\n                key={index}\n                index={index}\n                task={task} />\n        })\n\n        const { filterName, filterStatus } = this.state;\n\n        return (\n            <div className=\"panel panel-warning\">\n                <table border=\"1\" className=\"table table-bordered table-hover\">\n                    <thead>\n                        <tr>\n                            <th className=\"text-center\">ID</th>\n                            <th className=\"text-center\">Name</th>\n                            <th className=\"text-center\">Status</th>\n                            <th className=\"text-center\">Action</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td></td>\n                            <td>\n                                <input\n                                    className=\"form-control\"\n                                    type=\"text\"\n                                    name=\"filterName\"\n                                    value={filterName}\n                                    onChange={this.onChangeFilterValue} />\n                            </td>\n                            <td>\n                                <select\n                                    className=\"form-control\"\n                                    name=\"filterStatus\"\n                                    value={filterStatus}\n                                    onChange={this.onChangeFilterValue}>\n                                    <option value={-1}>All</option>\n                                    <option value={0}>Inactive</option>\n                                    <option value={1}>Active</option>\n                                </select>\n                            </td>\n                            <td></td>\n                        </tr>\n\n                        {elementTasks}\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        tasks: state.tasks\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    null\n)(TaskList)","import React, { Component } from 'react';\nimport './App.css';\nimport TaskForm from './components/TaskForm';\nimport TaskControl from './components/TaskControl';\nimport TaskList from './components/TaskList';\nimport { connect } from 'react-redux';\nimport * as actions from './actions/index';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            keyword: '',\n            filter: {\n                name: '',\n                status: -1\n            },\n            sort: {\n                by: 'name',\n                value: 1\n            }\n        };\n    }\n    onToggleForm = () => {\n        if (!this.props.isDisplayForm || this.props.taskEditing === null) {\n            this.props.onToggleForm();\n        }\n        this.props.updateEditingTask(null);\n    }\n\n    onChangeFilterValue = (filterData) => {\n        this.setState({\n            filter: {\n                name: filterData.filterName,\n                status: filterData.filterStatus\n            }\n        })\n    }\n\n    onSubmitSearch = (keyword) => {\n        this.setState({\n            keyword: keyword\n        });\n    }\n\n    render() {\n        const {\n            isDisplayForm\n        } = this.props;\n\n        /* START FILTER TASKS */\n        // if (filter) {\n        //     if (filter.name) {\n        //         tasks = tasks.filter((task) => {\n        //             return task.name.toLowerCase().indexOf(filter.name) !== -1;\n        //         });\n        //     }\n        //     tasks = tasks.filter((task) => {\n        //         if (filter.status === -1) {\n        //             return true;\n        //         } else {\n        //             return task.status === (filter.status === 1);\n        //         }\n        //     });\n        // }\n        /* END FILTER TASKS */\n\n        // if (keyword) {\n        //     tasks = tasks.filter((task) => {\n        //         return task.name.toLowerCase().indexOf(keyword) !== -1;\n        //     });\n        // }\n\n        return (\n            <div className=\"container\">\n                <div className=\"text-center\">\n                    <h1>WORK MANAGEMENT</h1>\n                </div>\n\n                {/* add box */}\n                <div className=\"row\">\n                    <div className={isDisplayForm === true ? \"col-xs-8 col-sm-8 col-md-8 col-lg-8\" : \"col-xs-12 col-sm-12 col-md-12 col-lg-12\"}>\n                        <div className=\"row\">\n                            <div className=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n                                <div className=\"panel panel-default\">\n                                    <div className=\"panel-body\">\n                                        <button className=\"btn btn-primary\"\n                                            onClick={this.onToggleForm}>\n                                            Add work\n                                        </button>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n\n                        {/* Search & sort */}\n                        <div className=\"row\">\n                            <div className=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n                                <TaskControl\n                                    onSubmitSearch={this.onSubmitSearch} />\n                            </div>\n                        </div>\n\n                        {/* list box */}\n                        <div className=\"row mt-15\">\n                            <div className=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n                                <TaskList\n                                    onChangeFilterValue={this.onChangeFilterValue} />\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"col-xs-4 col-sm-4 col-md-4 col-lg-4\">\n                        {isDisplayForm === true\n                            ? <TaskForm />\n                            : null}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        isDisplayForm: state.isDisplayForm,\n        taskEditing: state.taskEditing\n    };\n}\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onToggleForm: () => {\n            dispatch(actions.onToggleForm());\n        },\n        updateEditingTask: (task) => {\n            dispatch(actions.updateEditingTask(task));\n        },\n        onOpenForm: () => {\n            dispatch(actions.onOpenForm());\n        },\n        onCloseForm: () => {\n            dispatch(actions.onCloseForm());\n        }\n    };\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(App);\n","import * as ActionTypes from '../constants/ActionTypes';\n\nvar initialState = JSON.parse(localStorage.getItem('tasks'));\n\nconst generateRandomId = () => {\n    return getRandomString() + getRandomString() + '-' + getRandomString() + getRandomString();\n}\nconst getRandomString = () => {\n    return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1)\n}\nconst findIndexById = (id, list) => {\n    let result = -1;\n    list.forEach((item, index) => {\n        if (item.id === id) {\n            result = index;\n        }\n    });\n    return result;\n}\n\nconst reducer = (state = initialState, action) => {\n    // var id = '';\n    var index = -1;\n    switch (action.type) {\n        case ActionTypes.LIST_ALL:\n            return [...state];\n\n        case ActionTypes.ADD_TASK:\n            let newTask = {\n                ...action.task,\n                id: generateRandomId()\n            };\n\n            state.push(newTask);\n            localStorage.setItem('tasks', JSON.stringify(state));\n            return [...state];\n\n        case ActionTypes.UPDATE_TASK:\n            index = findIndexById(action.task.id, state);\n            state[index] = action.task;\n            localStorage.setItem('tasks', JSON.stringify(state));\n            return [...state];\n\n        case ActionTypes.TOGGLE_TASK_STATUS:\n            index = findIndexById(action.id, state);\n\n            state[index] = {\n                ...state[index],\n                status: !state[index].status\n            };\n\n            localStorage.setItem('tasks', JSON.stringify(state));\n            return [...state];\n\n        case ActionTypes.DELETE_TASK:\n            index = findIndexById(action.id, state);\n            state.splice(index, 1);\n            localStorage.setItem('tasks', JSON.stringify(state));\n            return [...state];\n\n        default:\n            return [...state];\n    }\n}\n\nexport default reducer","import * as ActionTypes from '../constants/ActionTypes';\n\nvar initialState = false;\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case ActionTypes.TOGGLE_ADD_FORM:\n            let newState = !state;\n            return newState;\n\n        case ActionTypes.OPEN_ADD_FORM:\n            return true;\n\n        case ActionTypes.CLOSE_ADD_FORM:\n            return false;\n\n        default:\n            return state;\n    }\n}\n\nexport default reducer","import * as ActionTypes from '../constants/ActionTypes';\n\nvar initialState = null;\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case ActionTypes.UPDATE_EDITING_TASK:\n            return action.task;\n\n        default:\n            return state;\n    }\n}\n\nexport default reducer","import { combineReducers } from 'redux';\nimport tasks from './tasks';\nimport isDisplayForm from './isDisplayForm';\nimport taskEditing from './taskEditing';\n\nconst rootReducer = combineReducers({\n    tasks,\n    isDisplayForm,\n    taskEditing\n});\n\nexport default rootReducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\nimport rootReducer from './reducers/index';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\n\nconst store = createStore(\n    rootReducer,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n    ,\n    document.getElementById('root')\n);\n\n// serviceWorker.unregister();\n"],"sourceRoot":""}